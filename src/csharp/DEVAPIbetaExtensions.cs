// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Aliencube.Forem.DevTo
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DEVAPIbeta.
    /// </summary>
    public static partial class DEVAPIbetaExtensions
    {
            /// <summary>
            /// Admin config
            /// </summary>
            /// <remarks>
            /// This endpoint returns the "site config" as set by admin.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetConfig(this IDEVAPIbeta operations)
            {
                return operations.GetConfigAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Admin config
            /// </summary>
            /// <remarks>
            /// This endpoint returns the "site config" as set by admin.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetConfigAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Site-wide Config
            /// </summary>
            /// <remarks>
            /// This endpoint allows admins to declare values or update values for "site
            /// config".
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Config up upsert
            /// </param>
            public static APIError UpsertConfig(this IDEVAPIbeta operations, SiteConfig body = default(SiteConfig))
            {
                return operations.UpsertConfigAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Site-wide Config
            /// </summary>
            /// <remarks>
            /// This endpoint allows admins to declare values or update values for "site
            /// config".
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Config up upsert
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<APIError> UpsertConfigAsync(this IDEVAPIbeta operations, SiteConfig body = default(SiteConfig), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertConfigWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Published articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of articles.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// By default it will return featured, published articles ordered
            /// by descending popularity.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tag'>
            /// Using this parameter will retrieve articles that contain the
            /// requested tag.
            ///
            /// Articles will be ordered by descending popularity.
            ///
            /// This parameter can be used in conjuction with `top`.
            /// </param>
            /// <param name='tags'>
            /// Using this parameter will retrieve articles with any of the comma-separated
            /// tags.
            ///
            /// Articles will be ordered by descending popularity.
            /// </param>
            /// <param name='tagsExclude'>
            /// Using this parameter will retrieve articles that do _not_ contain _any_ of
            /// comma-separated tags.
            ///
            /// Articles will be ordered by descending popularity.
            /// </param>
            /// <param name='username'>
            /// Using this parameter will retrieve articles belonging
            /// to a User or Organization ordered by descending publication date.
            ///
            /// If `state=all` the number of items returned will be `1000` instead of the
            /// default `30`.
            ///
            /// This parameter can be used in conjuction with `state`.
            /// </param>
            /// <param name='state'>
            /// Using this parameter will allow the client to check which articles are
            /// fresh or rising.
            ///
            /// If `state=fresh` the server will return fresh articles.
            /// If `state=rising` the server will return rising articles.
            ///
            /// This param can be used in conjuction with `username`, only if set to `all`.
            /// . Possible values include: 'fresh', 'rising', 'all'
            /// </param>
            /// <param name='top'>
            /// Using this parameter will allow the client to return the most popular
            /// articles
            /// in the last `N` days.
            ///
            /// `top` indicates the number of days since publication of the articles
            /// returned.
            ///
            /// This param can be used in conjuction with `tag`.
            /// </param>
            /// <param name='collectionId'>
            /// Adding this will allow the client to return the list of articles
            /// belonging to the requested collection, ordered by ascending
            /// publication date.
            /// </param>
            public static IList<ArticleIndex> GetArticles(this IDEVAPIbeta operations, string tag = default(string), string tags = default(string), string tagsExclude = default(string), string username = default(string), string state = default(string), int? top = default(int?), int? collectionId = default(int?))
            {
                return operations.GetArticlesAsync(tag, tags, tagsExclude, username, state, top, collectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Published articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of articles.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// By default it will return featured, published articles ordered
            /// by descending popularity.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tag'>
            /// Using this parameter will retrieve articles that contain the
            /// requested tag.
            ///
            /// Articles will be ordered by descending popularity.
            ///
            /// This parameter can be used in conjuction with `top`.
            /// </param>
            /// <param name='tags'>
            /// Using this parameter will retrieve articles with any of the comma-separated
            /// tags.
            ///
            /// Articles will be ordered by descending popularity.
            /// </param>
            /// <param name='tagsExclude'>
            /// Using this parameter will retrieve articles that do _not_ contain _any_ of
            /// comma-separated tags.
            ///
            /// Articles will be ordered by descending popularity.
            /// </param>
            /// <param name='username'>
            /// Using this parameter will retrieve articles belonging
            /// to a User or Organization ordered by descending publication date.
            ///
            /// If `state=all` the number of items returned will be `1000` instead of the
            /// default `30`.
            ///
            /// This parameter can be used in conjuction with `state`.
            /// </param>
            /// <param name='state'>
            /// Using this parameter will allow the client to check which articles are
            /// fresh or rising.
            ///
            /// If `state=fresh` the server will return fresh articles.
            /// If `state=rising` the server will return rising articles.
            ///
            /// This param can be used in conjuction with `username`, only if set to `all`.
            /// . Possible values include: 'fresh', 'rising', 'all'
            /// </param>
            /// <param name='top'>
            /// Using this parameter will allow the client to return the most popular
            /// articles
            /// in the last `N` days.
            ///
            /// `top` indicates the number of days since publication of the articles
            /// returned.
            ///
            /// This param can be used in conjuction with `tag`.
            /// </param>
            /// <param name='collectionId'>
            /// Adding this will allow the client to return the list of articles
            /// belonging to the requested collection, ordered by ascending
            /// publication date.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ArticleIndex>> GetArticlesAsync(this IDEVAPIbeta operations, string tag = default(string), string tags = default(string), string tagsExclude = default(string), string username = default(string), string state = default(string), int? top = default(int?), int? collectionId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArticlesWithHttpMessagesAsync(tag, tags, tagsExclude, username, state, top, collectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new article
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to create a new article.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// ### Rate limiting
            ///
            /// There is a limit of 10 requests per 30 seconds.
            ///
            /// ### Additional resources
            ///
            /// - [Rails tests for Articles
            /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Article to create
            /// </param>
            public static object CreateArticle(this IDEVAPIbeta operations, ArticleCreate body = default(ArticleCreate))
            {
                return operations.CreateArticleAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new article
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to create a new article.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// ### Rate limiting
            ///
            /// There is a limit of 10 requests per 30 seconds.
            ///
            /// ### Additional resources
            ///
            /// - [Rails tests for Articles
            /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Article to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateArticleAsync(this IDEVAPIbeta operations, ArticleCreate body = default(ArticleCreate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateArticleWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A published article by ID
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single
            /// published article given its `id`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the article
            /// </param>
            public static object GetArticleById(this IDEVAPIbeta operations, int id)
            {
                return operations.GetArticleByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A published article by ID
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single
            /// published article given its `id`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the article
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetArticleByIdAsync(this IDEVAPIbeta operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArticleByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an article
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to update an existing article.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// ### Rate limiting
            ///
            /// There is a limit of 30 requests per 30 seconds.
            ///
            /// ### Additional resources
            ///
            /// - [Rails tests for Articles
            /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the article
            /// </param>
            /// <param name='body'>
            /// Article params for the update.
            ///
            /// *Note: if the article contains a front matter in its body, its front
            /// matter properties will still take precedence over any JSON equivalent
            /// params, which means that the full body_markdown with the modified
            /// front matter params needs to be provided for an update to be successful*
            /// </param>
            public static object UpdateArticle(this IDEVAPIbeta operations, int id, ArticleUpdate body = default(ArticleUpdate))
            {
                return operations.UpdateArticleAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an article
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to update an existing article.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// ### Rate limiting
            ///
            /// There is a limit of 30 requests per 30 seconds.
            ///
            /// ### Additional resources
            ///
            /// - [Rails tests for Articles
            /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the article
            /// </param>
            /// <param name='body'>
            /// Article params for the update.
            ///
            /// *Note: if the article contains a front matter in its body, its front
            /// matter properties will still take precedence over any JSON equivalent
            /// params, which means that the full body_markdown with the modified
            /// front matter params needs to be provided for an update to be successful*
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateArticleAsync(this IDEVAPIbeta operations, int id, ArticleUpdate body = default(ArticleUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateArticleWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A published article by path
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single
            /// published article given its `path`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// User or organization username.
            /// </param>
            /// <param name='slug'>
            /// Slug of the article.
            /// </param>
            public static object GetArticleByPath(this IDEVAPIbeta operations, string username, string slug)
            {
                return operations.GetArticleByPathAsync(username, slug).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A published article by path
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single
            /// published article given its `path`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// User or organization username.
            /// </param>
            /// <param name='slug'>
            /// Slug of the article.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetArticleByPathAsync(this IDEVAPIbeta operations, string username, string slug, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArticleByPathWithHttpMessagesAsync(username, slug, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// User's articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of published articles
            /// on behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// Published articles will be in reverse chronological publication order.
            ///
            /// It will return published articles with pagination.
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUserArticles(this IDEVAPIbeta operations)
            {
                return operations.GetUserArticlesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// User's articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of published articles
            /// on behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// Published articles will be in reverse chronological publication order.
            ///
            /// It will return published articles with pagination.
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserArticlesAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserArticlesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// User's published articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of published articles
            /// on behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// Published articles will be in reverse chronological publication order.
            ///
            /// It will return published articles with pagination.
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUserPublishedArticles(this IDEVAPIbeta operations)
            {
                return operations.GetUserPublishedArticlesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// User's published articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of published articles
            /// on behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// Published articles will be in reverse chronological publication order.
            ///
            /// It will return published articles with pagination.
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserPublishedArticlesAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPublishedArticlesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// User's unpublished articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of unpublished articles
            /// on behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// Unpublished articles will be in reverse chronological creation order.
            ///
            /// It will return unpublished articles with pagination.
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUserUnpublishedArticles(this IDEVAPIbeta operations)
            {
                return operations.GetUserUnpublishedArticlesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// User's unpublished articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of unpublished articles
            /// on behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// Unpublished articles will be in reverse chronological creation order.
            ///
            /// It will return unpublished articles with pagination.
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserUnpublishedArticlesAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserUnpublishedArticlesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// User's all articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of all articles on
            /// behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// It will return both published and unpublished articles with pagination.
            ///
            /// Unpublished articles will be at the top of the list in reverse
            /// chronological creation order.
            /// Published articles will follow in reverse chronological publication order.
            ///
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUserAllArticles(this IDEVAPIbeta operations)
            {
                return operations.GetUserAllArticlesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// User's all articles
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of all articles on
            /// behalf of an authenticated user.
            ///
            /// "Articles" are all the posts that users create on DEV that typically
            /// show up in the feed. They can be a blog post, a discussion question,
            /// a help thread etc. but is referred to as article within the code.
            ///
            /// It will return both published and unpublished articles with pagination.
            ///
            /// Unpublished articles will be at the top of the list in reverse
            /// chronological creation order.
            /// Published articles will follow in reverse chronological publication order.
            ///
            /// By default a page will contain `30` articles.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserAllArticlesAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserAllArticlesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Comments
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve all comments belonging to an
            /// article or podcast episode as threaded conversations.
            ///
            /// It will return the all top level comments with their nested comments as
            /// threads. See the format specification for further details.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aId'>
            /// Article identifier.
            /// </param>
            /// <param name='pId'>
            /// Podcast Episode identifier.
            /// </param>
            public static object GetCommentsByArticleId(this IDEVAPIbeta operations, int? aId = default(int?), int? pId = default(int?))
            {
                return operations.GetCommentsByArticleIdAsync(aId, pId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Comments
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve all comments belonging to an
            /// article or podcast episode as threaded conversations.
            ///
            /// It will return the all top level comments with their nested comments as
            /// threads. See the format specification for further details.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aId'>
            /// Article identifier.
            /// </param>
            /// <param name='pId'>
            /// Podcast Episode identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCommentsByArticleIdAsync(this IDEVAPIbeta operations, int? aId = default(int?), int? pId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommentsByArticleIdWithHttpMessagesAsync(aId, pId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Comment
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a comment as well as his
            /// descendants comments.
            ///
            /// It will return the required comment (the root) with its nested
            /// descendants as a thread.
            ///
            /// See the format specification for further details.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Comment identifier.
            /// </param>
            public static object GetCommentById(this IDEVAPIbeta operations, string id)
            {
                return operations.GetCommentByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Comment
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a comment as well as his
            /// descendants comments.
            ///
            /// It will return the required comment (the root) with its nested
            /// descendants as a thread.
            ///
            /// See the format specification for further details.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Comment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCommentByIdAsync(this IDEVAPIbeta operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommentByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Followers
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of the followers
            /// they have.
            ///
            /// "Followers" are users that are following other users on the website.
            ///
            /// It supports pagination, each page will contain `80` followers by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetFollowers(this IDEVAPIbeta operations)
            {
                return operations.GetFollowersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Followers
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of the followers
            /// they have.
            ///
            /// "Followers" are users that are following other users on the website.
            ///
            /// It supports pagination, each page will contain `80` followers by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFollowersAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFollowersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Followed tags
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of the tags
            /// they follow.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetFollowedTags(this IDEVAPIbeta operations)
            {
                return operations.GetFollowedTagsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Followed tags
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of the tags
            /// they follow.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFollowedTagsAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFollowedTagsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Published listings
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of listings.
            ///
            /// "Listings" are classified ads that users create on DEV.
            /// They can be related to conference announcements, job offers, mentorships,
            /// upcoming events and more.
            ///
            /// By default it will return published listings ordered by descending
            /// freshness.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Listing> GetListings(this IDEVAPIbeta operations)
            {
                return operations.GetListingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Published listings
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of listings.
            ///
            /// "Listings" are classified ads that users create on DEV.
            /// They can be related to conference announcements, job offers, mentorships,
            /// upcoming events and more.
            ///
            /// By default it will return published listings ordered by descending
            /// freshness.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Listing>> GetListingsAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new listing
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to create a new listing.
            ///
            /// "Listings" are classified ads that users create on DEV.
            /// They can be related to conference announcements, job offers, mentorships,
            /// upcoming events and more.
            ///
            /// The user creating the listing or the organization on which behalf the user
            /// is creating for need to have enough creadits for this operation to be
            /// successful. The server will prioritize the organization's credits over
            /// the user's credits.
            ///
            /// ### Additional resources
            ///
            /// - [Rails tests for Listings
            /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/listings_spec.rb)
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Listing to create
            /// </param>
            public static object CreateListing(this IDEVAPIbeta operations, ListingCreate body = default(ListingCreate))
            {
                return operations.CreateListingAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new listing
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to create a new listing.
            ///
            /// "Listings" are classified ads that users create on DEV.
            /// They can be related to conference announcements, job offers, mentorships,
            /// upcoming events and more.
            ///
            /// The user creating the listing or the organization on which behalf the user
            /// is creating for need to have enough creadits for this operation to be
            /// successful. The server will prioritize the organization's credits over
            /// the user's credits.
            ///
            /// ### Additional resources
            ///
            /// - [Rails tests for Listings
            /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/listings_spec.rb)
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Listing to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateListingAsync(this IDEVAPIbeta operations, ListingCreate body = default(ListingCreate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateListingWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Published listings by category
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of listings belonging
            /// to the specified category.
            ///
            /// "Listings" are classified ads that users create on DEV.
            /// They can be related to conference announcements, job offers, mentorships,
            /// upcoming events and more.
            ///
            /// By default it will return published listings ordered by descending
            /// freshness.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// The category of the listing. Possible values include: 'cfp', 'forhire',
            /// 'collabs', 'education', 'jobs', 'mentors', 'products', 'mentees',
            /// 'forsale', 'events', 'misc'
            /// </param>
            public static IList<Listing> GetListingsByCategory(this IDEVAPIbeta operations, string category)
            {
                return operations.GetListingsByCategoryAsync(category).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Published listings by category
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of listings belonging
            /// to the specified category.
            ///
            /// "Listings" are classified ads that users create on DEV.
            /// They can be related to conference announcements, job offers, mentorships,
            /// upcoming events and more.
            ///
            /// By default it will return published listings ordered by descending
            /// freshness.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// The category of the listing. Possible values include: 'cfp', 'forhire',
            /// 'collabs', 'education', 'jobs', 'mentors', 'products', 'mentees',
            /// 'forsale', 'events', 'misc'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Listing>> GetListingsByCategoryAsync(this IDEVAPIbeta operations, string category, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListingsByCategoryWithHttpMessagesAsync(category, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A listing
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve
            /// a single listing given its `id`.
            ///
            /// An unpublished listing is only accessible if authentication is supplied
            /// and it belongs to the authenticated user.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the listing
            /// </param>
            public static object GetListingById(this IDEVAPIbeta operations, long id)
            {
                return operations.GetListingByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A listing
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve
            /// a single listing given its `id`.
            ///
            /// An unpublished listing is only accessible if authentication is supplied
            /// and it belongs to the authenticated user.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the listing
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetListingByIdAsync(this IDEVAPIbeta operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListingByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a listing
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to update an existing listing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the listing
            /// </param>
            /// <param name='body'>
            /// Listing params for the update.
            ///
            /// **Note**: except for bumping, publishing and unpublishing there are the
            /// following restrictions on the ability to update listings:
            ///
            /// - the payload has to contain at least one param among `title`,
            /// `body_markdown` or `tags`/`tag_list`
            /// - the listing can't be updated if it has not been bumped in the last 24
            /// hours
            /// - the listing can't be updated if it has been published but not recently
            /// bumped
            /// </param>
            public static object UpdateListing(this IDEVAPIbeta operations, long id, ListingUpdate body = default(ListingUpdate))
            {
                return operations.UpdateListingAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a listing
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to update an existing listing.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the listing
            /// </param>
            /// <param name='body'>
            /// Listing params for the update.
            ///
            /// **Note**: except for bumping, publishing and unpublishing there are the
            /// following restrictions on the ability to update listings:
            ///
            /// - the payload has to contain at least one param among `title`,
            /// `body_markdown` or `tags`/`tag_list`
            /// - the listing can't be updated if it has not been bumped in the last 24
            /// hours
            /// - the listing can't be updated if it has been published but not recently
            /// bumped
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateListingAsync(this IDEVAPIbeta operations, long id, ListingUpdate body = default(ListingUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateListingWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// User's reading list
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of readinglist reactions
            /// along with the related article for the authenticated user.
            ///
            /// Reading list will be in reverse chronological order base
            /// on the creation of the reaction.
            ///
            /// It will return paginated reading list items along with the articles
            /// they refer to. By default a page will contain `30` items
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetReadinglist(this IDEVAPIbeta operations)
            {
                return operations.GetReadinglistAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// User's reading list
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of readinglist reactions
            /// along with the related article for the authenticated user.
            ///
            /// Reading list will be in reverse chronological order base
            /// on the creation of the reaction.
            ///
            /// It will return paginated reading list items along with the articles
            /// they refer to. By default a page will contain `30` items
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetReadinglistAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReadinglistWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// An organization
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single organization by their
            /// username
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the organization
            /// </param>
            public static object GetOrganization(this IDEVAPIbeta operations, string username)
            {
                return operations.GetOrganizationAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// An organization
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single organization by their
            /// username
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the organization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOrganizationAsync(this IDEVAPIbeta operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrganizationWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Organization's users
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of users belonging to
            /// the organization
            ///
            /// It supports pagination, each page will contain `30` users by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the organization
            /// </param>
            public static object GetOrgUsers(this IDEVAPIbeta operations, string username)
            {
                return operations.GetOrgUsersAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Organization's users
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of users belonging to
            /// the organization
            ///
            /// It supports pagination, each page will contain `30` users by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the organization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOrgUsersAsync(this IDEVAPIbeta operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrgUsersWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Organization's listings
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of listings belonging to
            /// the organization
            ///
            /// It supports pagination, each page will contain `30` listing by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the organization
            /// </param>
            public static object GetOrgListings(this IDEVAPIbeta operations, string username)
            {
                return operations.GetOrgListingsAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Organization's listings
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of listings belonging to
            /// the organization
            ///
            /// It supports pagination, each page will contain `30` listing by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the organization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOrgListingsAsync(this IDEVAPIbeta operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrgListingsWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Published podcast episodes
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of podcast episodes.
            ///
            /// "Podcast episodes" are episodes belonging to podcasts.
            ///
            /// It will only return active podcast episodes that belong to published
            /// podcasts available on the platform,
            /// ordered by descending publication date.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Using this parameter will retrieve episodes belonging
            /// to a specific podcast.
            /// </param>
            public static object GetPodcastEpisodes(this IDEVAPIbeta operations, string username = default(string))
            {
                return operations.GetPodcastEpisodesAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Published podcast episodes
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of podcast episodes.
            ///
            /// "Podcast episodes" are episodes belonging to podcasts.
            ///
            /// It will only return active podcast episodes that belong to published
            /// podcasts available on the platform,
            /// ordered by descending publication date.
            ///
            /// It supports pagination, each page will contain `30` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Using this parameter will retrieve episodes belonging
            /// to a specific podcast.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPodcastEpisodesAsync(this IDEVAPIbeta operations, string username = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPodcastEpisodesWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tags
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of tags
            /// that can be used to tag articles.
            ///
            /// It will return tags ordered by popularity.
            ///
            /// It supports pagination, each page will contain `10` tags by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Tag> GetTags(this IDEVAPIbeta operations)
            {
                return operations.GetTagsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tags
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of tags
            /// that can be used to tag articles.
            ///
            /// It will return tags ordered by popularity.
            ///
            /// It supports pagination, each page will contain `10` tags by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Tag>> GetTagsAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTagsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A user
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single user, either by
            /// id or by the user's username
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the user.
            ///
            /// It can be either of the following two values:
            ///
            /// - an integer representing the id of the user
            /// - the string `by_username` (needs to be used in conjuction with the param
            /// `url`)
            /// </param>
            /// <param name='url'>
            /// Username of the user
            /// </param>
            public static object GetUser(this IDEVAPIbeta operations, string id, string url = default(string))
            {
                return operations.GetUserAsync(id, url).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A user
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single user, either by
            /// id or by the user's username
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the user.
            ///
            /// It can be either of the following two values:
            ///
            /// - an integer representing the id of the user
            /// - the string `by_username` (needs to be used in conjuction with the param
            /// `url`)
            /// </param>
            /// <param name='url'>
            /// Username of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserAsync(this IDEVAPIbeta operations, string id, string url = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(id, url, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The authenticated user
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve information
            /// about the authenticated user
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUserMe(this IDEVAPIbeta operations)
            {
                return operations.GetUserMeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The authenticated user
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve information
            /// about the authenticated user
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserMeAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserMeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// User or organization profile picture
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a user or organization
            /// profile image information by its corresponding username
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the user or organization
            /// </param>
            public static object GetProfileImage(this IDEVAPIbeta operations, string username)
            {
                return operations.GetProfileImageAsync(username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// User or organization profile picture
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a user or organization
            /// profile image information by its corresponding username
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Username of the user or organization
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProfileImageAsync(this IDEVAPIbeta operations, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfileImageWithHttpMessagesAsync(username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Articles with a video
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of articles
            /// that are uploaded with a video.
            ///
            /// It will only return published video articles
            /// ordered by descending popularity.
            ///
            /// It supports pagination, each page will contain `24` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ArticleVideo> GetArticlesWithVideo(this IDEVAPIbeta operations)
            {
                return operations.GetArticlesWithVideoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Articles with a video
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of articles
            /// that are uploaded with a video.
            ///
            /// It will only return published video articles
            /// ordered by descending popularity.
            ///
            /// It supports pagination, each page will contain `24` articles by default.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ArticleVideo>> GetArticlesWithVideoAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArticlesWithVideoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Webhooks
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of webhooks they have
            /// previously registered.
            ///
            /// "Webhooks" are used to register HTTP endpoints that will be called once a
            /// relevant event is
            /// triggered inside the web application, events like `article_created`,
            /// `article_updated`.
            ///
            /// It will return all webhooks, without pagination.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetWebhooks(this IDEVAPIbeta operations)
            {
                return operations.GetWebhooksAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Webhooks
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a list of webhooks they have
            /// previously registered.
            ///
            /// "Webhooks" are used to register HTTP endpoints that will be called once a
            /// relevant event is
            /// triggered inside the web application, events like `article_created`,
            /// `article_updated`.
            ///
            /// It will return all webhooks, without pagination.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWebhooksAsync(this IDEVAPIbeta operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebhooksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new webhook
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to create a new webhook.
            ///
            /// "Webhooks" are used to register HTTP endpoints that will be called once a
            /// relevant event is
            /// triggered inside the web application, events like `article_created`,
            /// `article_updated`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Webhook to create
            /// </param>
            public static object CreateWebhook(this IDEVAPIbeta operations, WebhookCreate body = default(WebhookCreate))
            {
                return operations.CreateWebhookAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new webhook
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to create a new webhook.
            ///
            /// "Webhooks" are used to register HTTP endpoints that will be called once a
            /// relevant event is
            /// triggered inside the web application, events like `article_created`,
            /// `article_updated`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Webhook to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateWebhookAsync(this IDEVAPIbeta operations, WebhookCreate body = default(WebhookCreate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWebhookWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A webhook endpoint
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single
            /// webhook given its `id`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the webhook
            /// </param>
            public static object GetWebhookById(this IDEVAPIbeta operations, long id)
            {
                return operations.GetWebhookByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A webhook endpoint
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to retrieve a single
            /// webhook given its `id`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the webhook
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWebhookByIdAsync(this IDEVAPIbeta operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebhookByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// A webhook endpoint
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to delete a single
            /// webhook given its `id`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the webhook
            /// </param>
            public static APIError DeleteWebhook(this IDEVAPIbeta operations, long id)
            {
                return operations.DeleteWebhookAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// A webhook endpoint
            /// </summary>
            /// <remarks>
            /// This endpoint allows the client to delete a single
            /// webhook given its `id`.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the webhook
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<APIError> DeleteWebhookAsync(this IDEVAPIbeta operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWebhookWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
