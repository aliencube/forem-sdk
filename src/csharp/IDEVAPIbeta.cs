// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Aliencube.Forem.DevTo
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    ///
    /// Access Forem articles, users and other resources via API.
    ///
    /// For a real-world example of Forem in action, check out
    /// [DEV](https://www.dev.to).
    ///
    /// All endpoints that don't require authentication are CORS enabled.
    ///
    /// Dates and date times, unless otherwise specified, must be in
    /// the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
    ///
    /// # Authentication
    ///
    /// &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
    /// </summary>
    public partial interface IDEVAPIbeta : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Pagination page.
        /// </summary>
        int? Page { get; set; }

        /// <summary>
        /// Page size (the number of items to return per page).
        /// </summary>
        int? PerPage { get; set; }

        /// <summary>
        /// Page size (the number of items to return per page).
        /// </summary>
        int? PerPage1 { get; set; }

        /// <summary>
        /// Page size (the number of items to return per page).
        /// </summary>
        int? PerPage2 { get; set; }

        /// <summary>
        /// Page size (the number of items to return per page).
        /// </summary>
        int? PerPage3 { get; set; }

        /// <summary>
        /// Page size (the number of items to return per page).
        /// </summary>
        int? PerPage4 { get; set; }

        /// <summary>
        /// Using this parameter will return listings belonging to the
        /// requested category.
        ///
        /// </summary>
        string Category { get; set; }


        /// <summary>
        /// Admin config
        /// </summary>
        /// <remarks>
        /// This endpoint returns the "site config" as set by admin.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetConfigWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Site-wide Config
        /// </summary>
        /// <remarks>
        /// This endpoint allows admins to declare values or update values for
        /// "site config".
        ///
        /// </remarks>
        /// <param name='body'>
        /// Config up upsert
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<APIError>> UpsertConfigWithHttpMessagesAsync(SiteConfig body = default(SiteConfig), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.
        ///
        /// "Articles" are all the posts that users create on DEV that
        /// typically
        /// show up in the feed. They can be a blog post, a discussion
        /// question,
        /// a help thread etc. but is referred to as article within the code.
        ///
        /// By default it will return featured, published articles ordered
        /// by descending popularity.
        ///
        /// It supports pagination, each page will contain `30` articles by
        /// default.
        ///
        /// </remarks>
        /// <param name='tag'>
        /// Using this parameter will retrieve articles that contain the
        /// requested tag.
        ///
        /// Articles will be ordered by descending popularity.
        ///
        /// This parameter can be used in conjuction with `top`.
        /// </param>
        /// <param name='tags'>
        /// Using this parameter will retrieve articles with any of the
        /// comma-separated tags.
        ///
        /// Articles will be ordered by descending popularity.
        /// </param>
        /// <param name='tagsExclude'>
        /// Using this parameter will retrieve articles that do _not_ contain
        /// _any_ of comma-separated tags.
        ///
        /// Articles will be ordered by descending popularity.
        /// </param>
        /// <param name='username'>
        /// Using this parameter will retrieve articles belonging
        /// to a User or Organization ordered by descending publication date.
        ///
        /// If `state=all` the number of items returned will be `1000` instead
        /// of the default `30`.
        ///
        /// This parameter can be used in conjuction with `state`.
        /// </param>
        /// <param name='state'>
        /// Using this parameter will allow the client to check which articles
        /// are fresh or rising.
        ///
        /// If `state=fresh` the server will return fresh articles.
        /// If `state=rising` the server will return rising articles.
        ///
        /// This param can be used in conjuction with `username`, only if set
        /// to `all`.
        /// . Possible values include: 'fresh', 'rising', 'all'
        /// </param>
        /// <param name='top'>
        /// Using this parameter will allow the client to return the most
        /// popular articles
        /// in the last `N` days.
        ///
        /// `top` indicates the number of days since publication of the
        /// articles
        /// returned.
        ///
        /// This param can be used in conjuction with `tag`.
        /// </param>
        /// <param name='collectionId'>
        /// Adding this will allow the client to return the list of articles
        /// belonging to the requested collection, ordered by ascending
        /// publication date.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ArticleIndex>>> GetArticlesWithHttpMessagesAsync(string tag = default(string), string tags = default(string), string tagsExclude = default(string), string username = default(string), string state = default(string), int? top = default(int?), int? collectionId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new article.
        ///
        /// "Articles" are all the posts that users create on DEV that
        /// typically
        /// show up in the feed. They can be a blog post, a discussion
        /// question,
        /// a help thread etc. but is referred to as article within the code.
        ///
        /// ### Rate limiting
        ///
        /// There is a limit of 10 requests per 30 seconds.
        ///
        /// ### Additional resources
        ///
        /// - [Rails tests for Articles
        /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)
        ///
        /// </remarks>
        /// <param name='body'>
        /// Article to create
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateArticleHeaders>> CreateArticleWithHttpMessagesAsync(ArticleCreate body = default(ArticleCreate), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A published article by ID
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single
        /// published article given its `id`.
        ///
        /// </remarks>
        /// <param name='id'>
        /// Id of the article
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetArticleByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing article.
        ///
        /// "Articles" are all the posts that users create on DEV that
        /// typically
        /// show up in the feed. They can be a blog post, a discussion
        /// question,
        /// a help thread etc. but is referred to as article within the code.
        ///
        /// ### Rate limiting
        ///
        /// There is a limit of 30 requests per 30 seconds.
        ///
        /// ### Additional resources
        ///
        /// - [Rails tests for Articles
        /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/articles_spec.rb)
        ///
        /// </remarks>
        /// <param name='id'>
        /// Id of the article
        /// </param>
        /// <param name='body'>
        /// Article params for the update.
        ///
        /// *Note: if the article contains a front matter in its body, its
        /// front
        /// matter properties will still take precedence over any JSON
        /// equivalent
        /// params, which means that the full body_markdown with the modified
        /// front matter params needs to be provided for an update to be
        /// successful*
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateArticleHeaders>> UpdateArticleWithHttpMessagesAsync(int id, ArticleUpdate body = default(ArticleUpdate), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A published article by path
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single
        /// published article given its `path`.
        ///
        /// </remarks>
        /// <param name='username'>
        /// User or organization username.
        /// </param>
        /// <param name='slug'>
        /// Slug of the article.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetArticleByPathWithHttpMessagesAsync(string username, string slug, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// User's articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published
        /// articles
        /// on behalf of an authenticated user.
        ///
        /// "Articles" are all the posts that users create on DEV that
        /// typically
        /// show up in the feed. They can be a blog post, a discussion
        /// question,
        /// a help thread etc. but is referred to as article within the code.
        ///
        /// Published articles will be in reverse chronological publication
        /// order.
        ///
        /// It will return published articles with pagination.
        /// By default a page will contain `30` articles.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetUserArticlesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// User's published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published
        /// articles
        /// on behalf of an authenticated user.
        ///
        /// "Articles" are all the posts that users create on DEV that
        /// typically
        /// show up in the feed. They can be a blog post, a discussion
        /// question,
        /// a help thread etc. but is referred to as article within the code.
        ///
        /// Published articles will be in reverse chronological publication
        /// order.
        ///
        /// It will return published articles with pagination.
        /// By default a page will contain `30` articles.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetUserPublishedArticlesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// User's unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished
        /// articles
        /// on behalf of an authenticated user.
        ///
        /// "Articles" are all the posts that users create on DEV that
        /// typically
        /// show up in the feed. They can be a blog post, a discussion
        /// question,
        /// a help thread etc. but is referred to as article within the code.
        ///
        /// Unpublished articles will be in reverse chronological creation
        /// order.
        ///
        /// It will return unpublished articles with pagination.
        /// By default a page will contain `30` articles.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetUserUnpublishedArticlesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// User's all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles
        /// on
        /// behalf of an authenticated user.
        ///
        /// "Articles" are all the posts that users create on DEV that
        /// typically
        /// show up in the feed. They can be a blog post, a discussion
        /// question,
        /// a help thread etc. but is referred to as article within the code.
        ///
        /// It will return both published and unpublished articles with
        /// pagination.
        ///
        /// Unpublished articles will be at the top of the list in reverse
        /// chronological creation order.
        /// Published articles will follow in reverse chronological publication
        /// order.
        ///
        /// By default a page will contain `30` articles.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetUserAllArticlesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Comments
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve all comments belonging
        /// to an
        /// article or podcast episode as threaded conversations.
        ///
        /// It will return the all top level comments with their nested
        /// comments as
        /// threads. See the format specification for further details.
        ///
        /// </remarks>
        /// <param name='aId'>
        /// Article identifier.
        /// </param>
        /// <param name='pId'>
        /// Podcast Episode identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCommentsByArticleIdWithHttpMessagesAsync(int? aId = default(int?), int? pId = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Comment
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a comment as well as
        /// his
        /// descendants comments.
        ///
        /// It will return the required comment (the root) with its nested
        /// descendants as a thread.
        ///
        /// See the format specification for further details.
        ///
        /// </remarks>
        /// <param name='id'>
        /// Comment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCommentByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Followers
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of the followers
        /// they have.
        ///
        /// "Followers" are users that are following other users on the
        /// website.
        ///
        /// It supports pagination, each page will contain `80` followers by
        /// default.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetFollowersWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Followed tags
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of the tags
        /// they follow.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetFollowedTagsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Published listings
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings.
        ///
        /// "Listings" are classified ads that users create on DEV.
        /// They can be related to conference announcements, job offers,
        /// mentorships,
        /// upcoming events and more.
        ///
        /// By default it will return published listings ordered by descending
        /// freshness.
        ///
        /// It supports pagination, each page will contain `30` articles by
        /// default.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Listing>>> GetListingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new listing.
        ///
        /// "Listings" are classified ads that users create on DEV.
        /// They can be related to conference announcements, job offers,
        /// mentorships,
        /// upcoming events and more.
        ///
        /// The user creating the listing or the organization on which behalf
        /// the user
        /// is creating for need to have enough creadits for this operation to
        /// be
        /// successful. The server will prioritize the organization's credits
        /// over
        /// the user's credits.
        ///
        /// ### Additional resources
        ///
        /// - [Rails tests for Listings
        /// API](https://github.com/forem/forem/blob/master/spec/requests/api/v0/listings_spec.rb)
        ///
        /// </remarks>
        /// <param name='body'>
        /// Listing to create
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateListingWithHttpMessagesAsync(ListingCreate body = default(ListingCreate), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Published listings by category
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings
        /// belonging
        /// to the specified category.
        ///
        /// "Listings" are classified ads that users create on DEV.
        /// They can be related to conference announcements, job offers,
        /// mentorships,
        /// upcoming events and more.
        ///
        /// By default it will return published listings ordered by descending
        /// freshness.
        ///
        /// It supports pagination, each page will contain `30` articles by
        /// default.
        ///
        /// </remarks>
        /// <param name='category'>
        /// The category of the listing. Possible values include: 'cfp',
        /// 'forhire', 'collabs', 'education', 'jobs', 'mentors', 'products',
        /// 'mentees', 'forsale', 'events', 'misc'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Listing>>> GetListingsByCategoryWithHttpMessagesAsync(string category, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve
        /// a single listing given its `id`.
        ///
        /// An unpublished listing is only accessible if authentication is
        /// supplied
        /// and it belongs to the authenticated user.
        ///
        /// </remarks>
        /// <param name='id'>
        /// Id of the listing
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetListingByIdWithHttpMessagesAsync(long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing listing.
        ///
        /// </remarks>
        /// <param name='id'>
        /// Id of the listing
        /// </param>
        /// <param name='body'>
        /// Listing params for the update.
        ///
        /// **Note**: except for bumping, publishing and unpublishing there are
        /// the
        /// following restrictions on the ability to update listings:
        ///
        /// - the payload has to contain at least one param among `title`,
        /// `body_markdown` or `tags`/`tag_list`
        /// - the listing can't be updated if it has not been bumped in the
        /// last 24 hours
        /// - the listing can't be updated if it has been published but not
        /// recently bumped
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateListingWithHttpMessagesAsync(long id, ListingUpdate body = default(ListingUpdate), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// User's reading list
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of readinglist
        /// reactions along with the related article for the authenticated
        /// user.
        ///
        /// Reading list will be in reverse chronological order base
        /// on the creation of the reaction.
        ///
        /// It will return paginated reading list items along with the articles
        /// they refer to. By default a page will contain `30` items
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetReadinglistWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// An organization
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single organization
        /// by their username
        ///
        /// </remarks>
        /// <param name='username'>
        /// Username of the organization
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOrganizationWithHttpMessagesAsync(string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Organization's users
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of users
        /// belonging to the organization
        ///
        /// It supports pagination, each page will contain `30` users by
        /// default.
        ///
        /// </remarks>
        /// <param name='username'>
        /// Username of the organization
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOrgUsersWithHttpMessagesAsync(string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Organization's listings
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings
        /// belonging to the organization
        ///
        /// It supports pagination, each page will contain `30` listing by
        /// default.
        ///
        /// </remarks>
        /// <param name='username'>
        /// Username of the organization
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOrgListingsWithHttpMessagesAsync(string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Organization's Articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of Articles
        /// belonging to the organization
        ///
        /// It supports pagination, each page will contain `30` listing by
        /// default.
        ///
        /// </remarks>
        /// <param name='username'>
        /// Username of the organization
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOrgArticlesWithHttpMessagesAsync(string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Published podcast episodes
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of podcast
        /// episodes.
        ///
        /// "Podcast episodes" are episodes belonging to podcasts.
        ///
        /// It will only return active podcast episodes that belong to
        /// published
        /// podcasts available on the platform,
        /// ordered by descending publication date.
        ///
        /// It supports pagination, each page will contain `30` articles by
        /// default.
        ///
        /// </remarks>
        /// <param name='username'>
        /// Using this parameter will retrieve episodes belonging
        /// to a specific podcast.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPodcastEpisodesWithHttpMessagesAsync(string username = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tags
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of tags
        /// that can be used to tag articles.
        ///
        /// It will return tags ordered by popularity.
        ///
        /// It supports pagination, each page will contain `10` tags by
        /// default.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Tag>>> GetTagsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A user
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single user, either
        /// by
        /// id or by the user's username
        ///
        /// </remarks>
        /// <param name='id'>
        /// Id of the user.
        ///
        /// It can be either of the following two values:
        ///
        /// - an integer representing the id of the user
        /// - the string `by_username` (needs to be used in conjuction with the
        /// param `url`)
        /// </param>
        /// <param name='url'>
        /// Username of the user
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetUserWithHttpMessagesAsync(string id, string url = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The authenticated user
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve information
        /// about the authenticated user
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetUserMeWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// User or organization profile picture
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a user or organization
        /// profile image information by its corresponding username
        ///
        /// </remarks>
        /// <param name='username'>
        /// Username of the user or organization
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetProfileImageWithHttpMessagesAsync(string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Articles with a video
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles
        /// that are uploaded with a video.
        ///
        /// It will only return published video articles
        /// ordered by descending popularity.
        ///
        /// It supports pagination, each page will contain `24` articles by
        /// default.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ArticleVideo>>> GetArticlesWithVideoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Webhooks
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of webhooks they
        /// have
        /// previously registered.
        ///
        /// "Webhooks" are used to register HTTP endpoints that will be called
        /// once a relevant event is
        /// triggered inside the web application, events like
        /// `article_created`, `article_updated`.
        ///
        /// It will return all webhooks, without pagination.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetWebhooksWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new webhook
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new webhook.
        ///
        /// "Webhooks" are used to register HTTP endpoints that will be called
        /// once a relevant event is
        /// triggered inside the web application, events like
        /// `article_created`, `article_updated`.
        ///
        /// </remarks>
        /// <param name='body'>
        /// Webhook to create
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateWebhookWithHttpMessagesAsync(WebhookCreate body = default(WebhookCreate), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A webhook endpoint
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single
        /// webhook given its `id`.
        ///
        /// </remarks>
        /// <param name='id'>
        /// Id of the webhook
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetWebhookByIdWithHttpMessagesAsync(long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// A webhook endpoint
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to delete a single
        /// webhook given its `id`.
        ///
        /// </remarks>
        /// <param name='id'>
        /// Id of the webhook
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<APIError>> DeleteWebhookWithHttpMessagesAsync(long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
