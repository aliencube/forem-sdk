// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Aliencube.Forem.DevTo.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Tag
    {
        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        public Tag()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        /// <param name="bgColorHex">Background color (hexadecimal)</param>
        /// <param name="textColorHex">Text color (hexadecimal)</param>
        public Tag(int id, string name, string bgColorHex, string textColorHex)
        {
            Id = id;
            Name = name;
            BgColorHex = bgColorHex;
            TextColorHex = textColorHex;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets background color (hexadecimal)
        /// </summary>
        [JsonProperty(PropertyName = "bg_color_hex")]
        public string BgColorHex { get; set; }

        /// <summary>
        /// Gets or sets text color (hexadecimal)
        /// </summary>
        [JsonProperty(PropertyName = "text_color_hex")]
        public string TextColorHex { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (BgColorHex == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BgColorHex");
            }
            if (TextColorHex == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TextColorHex");
            }
        }
    }
}
