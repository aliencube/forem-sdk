// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Aliencube.Forem.DevTo.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ArticleMe
    {
        /// <summary>
        /// Initializes a new instance of the ArticleMe class.
        /// </summary>
        public ArticleMe()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArticleMe class.
        /// </summary>
        /// <param name="publishedTimestamp">Crossposting or published date
        /// time</param>
        /// <param name="bodyMarkdown">The body of the article in Markdown
        /// format</param>
        public ArticleMe(string typeOfProperty, int id, string title, string description, string coverImage, bool published, System.DateTime publishedAt, IList<string> tagList, string slug, string path, string url, string canonicalUrl, int commentsCount, int positiveReactionsCount, int publicReactionsCount, int pageViewsCount, System.DateTime publishedTimestamp, string bodyMarkdown, SharedUser user, SharedOrganization organization = default(SharedOrganization), ArticleFlareTag flareTag = default(ArticleFlareTag))
        {
            TypeOfProperty = typeOfProperty;
            Id = id;
            Title = title;
            Description = description;
            CoverImage = coverImage;
            Published = published;
            PublishedAt = publishedAt;
            TagList = tagList;
            Slug = slug;
            Path = path;
            Url = url;
            CanonicalUrl = canonicalUrl;
            CommentsCount = commentsCount;
            PositiveReactionsCount = positiveReactionsCount;
            PublicReactionsCount = publicReactionsCount;
            PageViewsCount = pageViewsCount;
            PublishedTimestamp = publishedTimestamp;
            BodyMarkdown = bodyMarkdown;
            User = user;
            Organization = organization;
            FlareTag = flareTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type_of")]
        public string TypeOfProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cover_image")]
        public string CoverImage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "published")]
        public bool Published { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "published_at")]
        public System.DateTime PublishedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tag_list")]
        public IList<string> TagList { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "slug")]
        public string Slug { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canonical_url")]
        public string CanonicalUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comments_count")]
        public int CommentsCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "positive_reactions_count")]
        public int PositiveReactionsCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "public_reactions_count")]
        public int PublicReactionsCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "page_views_count")]
        public int PageViewsCount { get; set; }

        /// <summary>
        /// Gets or sets crossposting or published date time
        /// </summary>
        [JsonProperty(PropertyName = "published_timestamp")]
        public System.DateTime PublishedTimestamp { get; set; }

        /// <summary>
        /// Gets or sets the body of the article in Markdown format
        /// </summary>
        [JsonProperty(PropertyName = "body_markdown")]
        public string BodyMarkdown { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public SharedUser User { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "organization")]
        public SharedOrganization Organization { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flare_tag")]
        public ArticleFlareTag FlareTag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TypeOfProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TypeOfProperty");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (CoverImage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CoverImage");
            }
            if (TagList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TagList");
            }
            if (Slug == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Slug");
            }
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (CanonicalUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CanonicalUrl");
            }
            if (BodyMarkdown == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BodyMarkdown");
            }
            if (User == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "User");
            }
        }
    }
}
