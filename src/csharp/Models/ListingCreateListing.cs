// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Aliencube.Forem.DevTo.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ListingCreateListing
    {
        /// <summary>
        /// Initializes a new instance of the ListingCreateListing class.
        /// </summary>
        public ListingCreateListing()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ListingCreateListing class.
        /// </summary>
        /// <param name="bodyMarkdown">The body of the listing in Markdown
        /// format.</param>
        /// <param name="category">Possible values include: 'cfp', 'forhire',
        /// 'collabs', 'education', 'jobs', 'mentors', 'products', 'mentees',
        /// 'forsale', 'events', 'misc'</param>
        /// <param name="tags">Tags related to the listing.
        ///
        /// A maximum of 8 tags are allowed and it takes precedence over
        /// `tag_list`.
        /// </param>
        /// <param name="tagList">Comma separated list of tags.
        ///
        /// A maximum of 8 tags are allowed.
        /// </param>
        /// <param name="expiresAt">Date and time of expiration.</param>
        /// <param name="contactViaConnect">True if users are allowed to
        /// contact the listing's owner
        /// via DEV connect, false otherwise.
        ///
        /// Defaults to false.
        /// </param>
        /// <param name="location">Geographical area or city for the
        /// listing.</param>
        /// <param name="organizationId">The id of the organization the user is
        /// creating the listing for.
        ///
        /// Only users belonging to an organization can assign the listing to
        /// it.
        /// </param>
        /// <param name="action">Set it to "draft" to create an unpublished
        /// listing. Possible values include: 'draft'</param>
        public ListingCreateListing(string title, string bodyMarkdown, string category, IList<string> tags = default(IList<string>), string tagList = default(string), System.DateTime? expiresAt = default(System.DateTime?), bool? contactViaConnect = default(bool?), string location = default(string), long? organizationId = default(long?), string action = default(string))
        {
            Title = title;
            BodyMarkdown = bodyMarkdown;
            Category = category;
            Tags = tags;
            TagList = tagList;
            ExpiresAt = expiresAt;
            ContactViaConnect = contactViaConnect;
            Location = location;
            OrganizationId = organizationId;
            Action = action;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the body of the listing in Markdown format.
        /// </summary>
        [JsonProperty(PropertyName = "body_markdown")]
        public string BodyMarkdown { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'cfp', 'forhire', 'collabs',
        /// 'education', 'jobs', 'mentors', 'products', 'mentees', 'forsale',
        /// 'events', 'misc'
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets tags related to the listing.
        ///
        /// A maximum of 8 tags are allowed and it takes precedence over
        /// `tag_list`.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Gets or sets comma separated list of tags.
        ///
        /// A maximum of 8 tags are allowed.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "tag_list")]
        public string TagList { get; set; }

        /// <summary>
        /// Gets or sets date and time of expiration.
        /// </summary>
        [JsonProperty(PropertyName = "expires_at")]
        public System.DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or sets true if users are allowed to contact the listing's
        /// owner
        /// via DEV connect, false otherwise.
        ///
        /// Defaults to false.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "contact_via_connect")]
        public bool? ContactViaConnect { get; set; }

        /// <summary>
        /// Gets or sets geographical area or city for the listing.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the id of the organization the user is creating the
        /// listing for.
        ///
        /// Only users belonging to an organization can assign the listing to
        /// it.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "organization_id")]
        public long? OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets set it to "draft" to create an unpublished listing.
        /// Possible values include: 'draft'
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (BodyMarkdown == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BodyMarkdown");
            }
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
        }
    }
}
